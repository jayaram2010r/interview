Kubernetes Interview Questions (3+ Years Experience)

1. What is the difference between ClusterIP and ExternalName service types?

2. How does Kubernetes handle failed liveness probes over time?

3. How do you set up Pod Anti-Affinity rules?

4. Explain how Kubernetes RBAC integrates with third-party identity providers.

5. How does Kubernetes handle node scaling with Cluster Autoscaler?

6. What is the difference between kubectl apply and kubectl create?

7. How would you approach securing secrets in a GitOps workflow?

8. What tools would you use for validating Kubernetes manifests before deployment?

9. Describe the impact of using hostNetwork: true in a pod.

10. How do you handle stuck finalizers during resource deletion?

11. What are ephemeral containers and how do you use them for debugging?

12. Explain the role of kube-dns or CoreDNS in service discovery.

13. How would you debug a failing CronJob in Kubernetes?

14. What are some potential performance bottlenecks in Kubernetes workloads?

15. How do you handle network segmentation in a multi-tenant Kubernetes cluster?

16. What is the difference between ephemeral volumes and persistent volumes?

17. How do you manage dynamic secrets in Kubernetes for applications?

18. How would you perform a rolling update of a ConfigMap without downtime?
Deployment controller's rolling update strategy and ensure your application is designed to handle ConfigMap updates gracefully. 
The key is to configure the Deployment to incrementally update Pods with the new ConfigMap, minimizing downtime and ensuring continuous service.
Modify the ConfigMap using kubectl edit configmap <configmap-name> or kubectl apply -f <configmap.yaml>
kubectl rollout restart deployment <deployment-name>--->Deployment controller to update Pods incrementally. 

19. What is kubectl kustomize and how does it compare with Helm?

20. How would you detect and recover from node pressure scenarios automatically?

21. How do PodDisruptionBudgets interact with cluster upgrades?

22. Whatâ€™s the process for creating custom controllers or operators in Kubernetes?

23. How would you migrate workloads between clusters?

24. How do you detect pod-level DNS issues?

25. How does container resource throttling work in Kubernetes?

26. How can you prevent a misconfigured Helm chart from affecting production?

27. What are the best practices for running stateful workloads in Kubernetes?

28. How do you handle Kubernetes version upgrades in a production cluster?

29. How would you build a multi-region highly available Kubernetes setup?

30. How can you validate the integrity of container images before deployment?

1. k get pod -A
2. cd /etc/kubernetes/manifests: ls -lrt 
3. controlplane:/etc/kubernetes/manifests$ cat etcd.yaml | grep file
4. controlplane:/etc/kubernetes/manifests$ ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 \
  --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.k
ey snapshot save /opt/etcd-backup.db


k create deployment nginx-deployment --image nginx:1.16 --replicas 2
k get deployments.apps
k set image -help
k get deployments.apps -o yaml
kubectl set image deployments/nginx-deployment nginx=nginx:1.17 --record


k run static-pod --image busybox --dry-run=client -o yaml --command -- sleep 2000
ssh node01
node01: cd /etc/kubernetes/manifests$ nano static.yaml --copy the content from 1st command
node01:/etc/kubernetes/manifests$ logout
k get pods -A
k get pods -o wide

https://www.youtube.com/watch?v=o_7jlMBHFFA

k create namespace dev
k get pod --all-namespaces
k run nginx-pod --image=nginx:alpine
k get pods
k describe pod nginx-pod
k run --help
kubectl run hazelcast --image=redis:alpine --labels ties=jayaram
k describe pod hazelcast
k create namespace dev
k get ns
k expose pod  hazelcast --port 6379 --name messaging-service
k describe svc messaging-service
k create deployment hr-web --image=nginx --replicas 2
k run static-pod --image=nginx1 --dry-run=client -o yaml --command -- sleep 1000 > static-box.yaml
k create namespace finance
k run temp-bus --image=redis:alpine -n finance
k describe pod temp-bus -n finance
k get nodes -o jsonpath='{.items[*].status.nodeInfo.osImage}'
vi pv.yaml
k create -f pv.yaml
k get pv
k create namespace dev
k create deployment nginx-deployment --image nginx:1.16 --dry-run=client -o yaml --replicas 3 -n dev
